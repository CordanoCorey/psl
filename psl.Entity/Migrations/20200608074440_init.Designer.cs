// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using psl.Entity.Context;

namespace psl.Entity.Migrations
{
    [DbContext(typeof(PSLContext))]
    [Migration("20200608074440_init")]
    partial class init
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "3.1.0")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<int>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("RoleId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("RoleClaim","Auth");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<int>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("UserClaim","Auth");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<int>", b =>
                {
                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("ProviderKey", "LoginProvider");

                    b.HasIndex("UserId");

                    b.ToTable("UserLogin","Auth");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<int>", b =>
                {
                    b.Property<int>("RoleId")
                        .HasColumnType("int");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("RoleId", "UserId");

                    b.HasIndex("UserId");

                    b.ToTable("UserRole","Auth");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<int>", b =>
                {
                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "Value", "LoginProvider");

                    b.ToTable("UserToken","Auth");
                });

            modelBuilder.Entity("psl.Entity.DataClasses.Account", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Account","Auth");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "CSS"
                        },
                        new
                        {
                            Id = 2,
                            Name = "PSL"
                        });
                });

            modelBuilder.Entity("psl.Entity.DataClasses.AccountRole", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(100)")
                        .HasMaxLength(100);

                    b.Property<int>("Sort")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("AccountRole","Lookup");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            IsActive = true,
                            Name = "Admin",
                            Sort = 1
                        },
                        new
                        {
                            Id = 2,
                            IsActive = true,
                            Name = "Member",
                            Sort = 2
                        });
                });

            modelBuilder.Entity("psl.Entity.DataClasses.AccountUserXref", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("AccountId")
                        .HasColumnType("int");

                    b.Property<int?>("AccountRoleId")
                        .HasColumnType("int");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("AccountId");

                    b.HasIndex("AccountRoleId");

                    b.HasIndex("UserId");

                    b.ToTable("AccountUser_xref","Auth");
                });

            modelBuilder.Entity("psl.Entity.DataClasses.ApplicationRole", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedName")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("Role","Auth");
                });

            modelBuilder.Entity("psl.Entity.DataClasses.ApplicationUser", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("nvarchar(100)")
                        .HasMaxLength(100);

                    b.Property<string>("LastName")
                        .HasColumnType("nvarchar(100)")
                        .HasMaxLength(100);

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedUserName")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PasswordResetCode")
                        .HasColumnType("nvarchar(100)")
                        .HasMaxLength(100);

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<int>("PrimaryAccountId")
                        .HasColumnType("int");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.HasIndex("PrimaryAccountId");

                    b.ToTable("User","Auth");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "f605120f-716d-40c3-9dbd-8ff473410823",
                            Email = "gelbaughcm@gmail.com",
                            EmailConfirmed = false,
                            FirstName = "System",
                            LastName = "Administrator",
                            LockoutEnabled = false,
                            NormalizedEmail = "gelbaughcm@gmail.com",
                            NormalizedUserName = "gelbaughcm@gmail.com",
                            PasswordHash = "AQAAAAEAACcQAAAAELOBJuVxexUotv2KcwjrXvL1y7w0fqQDt0OZqrA9SBRw2KUWbDCzhlJPFU7Y7P+u7Q==",
                            PhoneNumberConfirmed = false,
                            PrimaryAccountId = 1,
                            SecurityStamp = "dfafd561-8cef-40ad-8c7a-339dc67529d0",
                            TwoFactorEnabled = false,
                            UserName = "gelbaughcm@gmail.com"
                        },
                        new
                        {
                            Id = 2,
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "b39b7fd6-391c-4d74-ae0c-14a75b78866d",
                            Email = "corey@capitalsoftwaresolutions.io",
                            EmailConfirmed = false,
                            FirstName = "Tara",
                            LastName = "Long",
                            LockoutEnabled = false,
                            NormalizedEmail = "corey@capitalsoftwaresolutions.io",
                            NormalizedUserName = "corey@capitalsoftwaresolutions.io",
                            PasswordHash = "AQAAAAEAACcQAAAAELOBJuVxexUotv2KcwjrXvL1y7w0fqQDt0OZqrA9SBRw2KUWbDCzhlJPFU7Y7P+u7Q==",
                            PhoneNumberConfirmed = false,
                            PrimaryAccountId = 2,
                            SecurityStamp = "YSMHWI6B5ZHJFY4JDYXCHTUO52NXZWXB",
                            TwoFactorEnabled = false,
                            UserName = "corey@capitalsoftwaresolutions.io"
                        },
                        new
                        {
                            Id = 3,
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "b39b7fd6-391c-4d74-ae0c-14a75b78866d",
                            Email = "ben@capitalsoftwaresolutions.io",
                            EmailConfirmed = false,
                            FirstName = "John",
                            LastName = "Deere",
                            LockoutEnabled = false,
                            NormalizedEmail = "ben@capitalsoftwaresolutions.io",
                            NormalizedUserName = "ben@capitalsoftwaresolutions.io",
                            PasswordHash = "AQAAAAEAACcQAAAAELOBJuVxexUotv2KcwjrXvL1y7w0fqQDt0OZqrA9SBRw2KUWbDCzhlJPFU7Y7P+u7Q==",
                            PhoneNumberConfirmed = false,
                            PrimaryAccountId = 2,
                            SecurityStamp = "YSMHWI6B5ZHJFY4JDYXCHTUO52NXZWXB",
                            TwoFactorEnabled = false,
                            UserName = "ben@capitalsoftwaresolutions.io"
                        });
                });

            modelBuilder.Entity("psl.Entity.DataClasses.Carrier", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Abbrevation")
                        .HasColumnType("nvarchar(20)")
                        .HasMaxLength(20);

                    b.Property<int>("CreatedById")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("LastModifiedById")
                        .HasColumnType("int");

                    b.Property<DateTime>("LastModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(100)")
                        .HasMaxLength(100);

                    b.HasKey("Id");

                    b.HasIndex("CreatedById");

                    b.HasIndex("LastModifiedById");

                    b.ToTable("Carrier","Common");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Abbrevation = "Diamond",
                            CreatedById = 1,
                            CreatedDate = new DateTime(2020, 4, 16, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            LastModifiedById = 1,
                            LastModifiedDate = new DateTime(2020, 4, 16, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Diamond"
                        },
                        new
                        {
                            Id = 2,
                            Abbrevation = "Warren",
                            CreatedById = 1,
                            CreatedDate = new DateTime(2020, 4, 16, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            LastModifiedById = 1,
                            LastModifiedDate = new DateTime(2020, 4, 16, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Warren"
                        },
                        new
                        {
                            Id = 3,
                            Abbrevation = "ATS",
                            CreatedById = 1,
                            CreatedDate = new DateTime(2020, 4, 16, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            LastModifiedById = 1,
                            LastModifiedDate = new DateTime(2020, 4, 16, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "ATS"
                        });
                });

            modelBuilder.Entity("psl.Entity.DataClasses.Dealer", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("CreatedById")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("LastModifiedById")
                        .HasColumnType("int");

                    b.Property<DateTime>("LastModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(100)")
                        .HasMaxLength(100);

                    b.HasKey("Id");

                    b.HasIndex("CreatedById");

                    b.HasIndex("LastModifiedById");

                    b.ToTable("Dealer","Common");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreatedById = 1,
                            CreatedDate = new DateTime(2020, 4, 16, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            LastModifiedById = 1,
                            LastModifiedDate = new DateTime(2020, 4, 16, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Deer Country Farm and Lawn, Inc."
                        },
                        new
                        {
                            Id = 2,
                            CreatedById = 1,
                            CreatedDate = new DateTime(2020, 4, 16, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            LastModifiedById = 1,
                            LastModifiedDate = new DateTime(2020, 4, 16, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Shoppa's Farm Supply, Inc."
                        },
                        new
                        {
                            Id = 3,
                            CreatedById = 1,
                            CreatedDate = new DateTime(2020, 4, 16, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            LastModifiedById = 1,
                            LastModifiedDate = new DateTime(2020, 4, 16, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Campbell Tractor & Implement"
                        });
                });

            modelBuilder.Entity("psl.Entity.DataClasses.DealerLocationXref", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("DealerId")
                        .HasColumnType("int");

                    b.Property<int>("LocationId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("DealerId");

                    b.HasIndex("LocationId");

                    b.ToTable("DealerLocation_xref","Common");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            DealerId = 1,
                            LocationId = 11
                        },
                        new
                        {
                            Id = 2,
                            DealerId = 1,
                            LocationId = 12
                        },
                        new
                        {
                            Id = 3,
                            DealerId = 1,
                            LocationId = 13
                        },
                        new
                        {
                            Id = 4,
                            DealerId = 1,
                            LocationId = 14
                        });
                });

            modelBuilder.Entity("psl.Entity.DataClasses.Location", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("City")
                        .HasColumnType("nvarchar(100)")
                        .HasMaxLength(100);

                    b.Property<int>("CreatedById")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("LastModifiedById")
                        .HasColumnType("int");

                    b.Property<DateTime>("LastModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(100)")
                        .HasMaxLength(100);

                    b.Property<int>("StateId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CreatedById");

                    b.HasIndex("LastModifiedById");

                    b.HasIndex("StateId");

                    b.ToTable("Location","Common");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            City = "Carlisle",
                            CreatedById = 1,
                            CreatedDate = new DateTime(2020, 4, 16, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            LastModifiedById = 1,
                            LastModifiedDate = new DateTime(2020, 4, 16, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Carlisle, PA Main Office",
                            StateId = 1
                        },
                        new
                        {
                            Id = 2,
                            City = "Dundalk",
                            CreatedById = 1,
                            CreatedDate = new DateTime(2020, 4, 16, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            LastModifiedById = 1,
                            LastModifiedDate = new DateTime(2020, 4, 16, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Baltimore, MD",
                            StateId = 3
                        },
                        new
                        {
                            Id = 3,
                            City = "Kernersville",
                            CreatedById = 1,
                            CreatedDate = new DateTime(2020, 4, 16, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            LastModifiedById = 1,
                            LastModifiedDate = new DateTime(2020, 4, 16, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Kernersville, NC",
                            StateId = 4
                        },
                        new
                        {
                            Id = 4,
                            City = "Dubuque",
                            CreatedById = 1,
                            CreatedDate = new DateTime(2020, 4, 16, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            LastModifiedById = 1,
                            LastModifiedDate = new DateTime(2020, 4, 16, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Dubuque, IA",
                            StateId = 6
                        },
                        new
                        {
                            Id = 5,
                            City = "Waterloo",
                            CreatedById = 1,
                            CreatedDate = new DateTime(2020, 4, 16, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            LastModifiedById = 1,
                            LastModifiedDate = new DateTime(2020, 4, 16, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Waterloo, IA",
                            StateId = 6
                        },
                        new
                        {
                            Id = 6,
                            City = "Ottumwa",
                            CreatedById = 1,
                            CreatedDate = new DateTime(2020, 4, 16, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            LastModifiedById = 1,
                            LastModifiedDate = new DateTime(2020, 4, 16, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Ottumwa, IA",
                            StateId = 6
                        },
                        new
                        {
                            Id = 7,
                            City = "E. Moline",
                            CreatedById = 1,
                            CreatedDate = new DateTime(2020, 4, 16, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            LastModifiedById = 1,
                            LastModifiedDate = new DateTime(2020, 4, 16, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Harvester, IA",
                            StateId = 5
                        },
                        new
                        {
                            Id = 8,
                            City = "Bettendorf",
                            CreatedById = 1,
                            CreatedDate = new DateTime(2020, 4, 16, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            LastModifiedById = 1,
                            LastModifiedDate = new DateTime(2020, 4, 16, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Bettendorf, IA",
                            StateId = 6
                        },
                        new
                        {
                            Id = 9,
                            City = "Davenport",
                            CreatedById = 1,
                            CreatedDate = new DateTime(2020, 4, 16, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            LastModifiedById = 1,
                            LastModifiedDate = new DateTime(2020, 4, 16, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Davenport, IA",
                            StateId = 6
                        },
                        new
                        {
                            Id = 10,
                            City = "Moline",
                            CreatedById = 1,
                            CreatedDate = new DateTime(2020, 4, 16, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            LastModifiedById = 1,
                            LastModifiedDate = new DateTime(2020, 4, 16, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Deere & Company World Headquarters",
                            StateId = 5
                        },
                        new
                        {
                            Id = 11,
                            City = "Lancaster",
                            CreatedById = 1,
                            CreatedDate = new DateTime(2020, 4, 16, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            LastModifiedById = 1,
                            LastModifiedDate = new DateTime(2020, 4, 16, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Deer Country Farm and Lawn, Inc. Lancaster Location",
                            StateId = 1
                        },
                        new
                        {
                            Id = 12,
                            City = "Adamstown",
                            CreatedById = 1,
                            CreatedDate = new DateTime(2020, 4, 16, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            LastModifiedById = 1,
                            LastModifiedDate = new DateTime(2020, 4, 16, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Deer Country Farm and Lawn, Inc. Adamstown Location",
                            StateId = 1
                        },
                        new
                        {
                            Id = 13,
                            City = "Lebanon",
                            CreatedById = 1,
                            CreatedDate = new DateTime(2020, 4, 16, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            LastModifiedById = 1,
                            LastModifiedDate = new DateTime(2020, 4, 16, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Deer Country Farm and Lawn, Inc. Lebanon Location",
                            StateId = 1
                        },
                        new
                        {
                            Id = 14,
                            City = "Allentown",
                            CreatedById = 1,
                            CreatedDate = new DateTime(2020, 4, 16, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            LastModifiedById = 1,
                            LastModifiedDate = new DateTime(2020, 4, 16, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Deer Country Farm and Lawn, Inc. Allentown Location",
                            StateId = 1
                        });
                });

            modelBuilder.Entity("psl.Entity.DataClasses.Order", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("CreatedById")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("LastModifiedById")
                        .HasColumnType("int");

                    b.Property<DateTime>("LastModifiedDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("CreatedById");

                    b.HasIndex("LastModifiedById");

                    b.ToTable("Order","Common");
                });

            modelBuilder.Entity("psl.Entity.DataClasses.OrderProductXref", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("OrderId")
                        .HasColumnType("int");

                    b.Property<int?>("OrderProductXrefId")
                        .HasColumnType("int");

                    b.Property<int>("ProductId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("OrderId");

                    b.HasIndex("OrderProductXrefId");

                    b.HasIndex("ProductId");

                    b.ToTable("OrderProduct_xref","Common");
                });

            modelBuilder.Entity("psl.Entity.DataClasses.Product", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("CreatedById")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("LastModifiedById")
                        .HasColumnType("int");

                    b.Property<DateTime>("LastModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(100)")
                        .HasMaxLength(100);

                    b.HasKey("Id");

                    b.HasIndex("CreatedById");

                    b.HasIndex("LastModifiedById");

                    b.ToTable("Product","Common");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreatedById = 1,
                            CreatedDate = new DateTime(2020, 4, 16, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            LastModifiedById = 1,
                            LastModifiedDate = new DateTime(2020, 4, 16, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Compact 1 Series"
                        },
                        new
                        {
                            Id = 2,
                            CreatedById = 1,
                            CreatedDate = new DateTime(2020, 4, 16, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            LastModifiedById = 1,
                            LastModifiedDate = new DateTime(2020, 4, 16, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Compact 2 Series"
                        },
                        new
                        {
                            Id = 3,
                            CreatedById = 1,
                            CreatedDate = new DateTime(2020, 4, 16, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            LastModifiedById = 1,
                            LastModifiedDate = new DateTime(2020, 4, 16, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Compact 3 Series"
                        },
                        new
                        {
                            Id = 4,
                            CreatedById = 1,
                            CreatedDate = new DateTime(2020, 4, 16, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            LastModifiedById = 1,
                            LastModifiedDate = new DateTime(2020, 4, 16, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Compact 4 Series"
                        },
                        new
                        {
                            Id = 5,
                            CreatedById = 1,
                            CreatedDate = new DateTime(2020, 4, 16, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            LastModifiedById = 1,
                            LastModifiedDate = new DateTime(2020, 4, 16, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Utility 5E Series"
                        },
                        new
                        {
                            Id = 6,
                            CreatedById = 1,
                            CreatedDate = new DateTime(2020, 4, 16, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            LastModifiedById = 1,
                            LastModifiedDate = new DateTime(2020, 4, 16, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Utility 5M Series"
                        },
                        new
                        {
                            Id = 7,
                            CreatedById = 1,
                            CreatedDate = new DateTime(2020, 4, 16, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            LastModifiedById = 1,
                            LastModifiedDate = new DateTime(2020, 4, 16, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Utility 5R Series"
                        },
                        new
                        {
                            Id = 8,
                            CreatedById = 1,
                            CreatedDate = new DateTime(2020, 4, 16, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            LastModifiedById = 1,
                            LastModifiedDate = new DateTime(2020, 4, 16, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Utility 6E Series"
                        },
                        new
                        {
                            Id = 9,
                            CreatedById = 1,
                            CreatedDate = new DateTime(2020, 4, 16, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            LastModifiedById = 1,
                            LastModifiedDate = new DateTime(2020, 4, 16, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Utility 6M Series"
                        },
                        new
                        {
                            Id = 10,
                            CreatedById = 1,
                            CreatedDate = new DateTime(2020, 4, 16, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            LastModifiedById = 1,
                            LastModifiedDate = new DateTime(2020, 4, 16, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Utility 6R Series"
                        },
                        new
                        {
                            Id = 11,
                            CreatedById = 1,
                            CreatedDate = new DateTime(2020, 4, 16, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            LastModifiedById = 1,
                            LastModifiedDate = new DateTime(2020, 4, 16, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "5075GL"
                        },
                        new
                        {
                            Id = 12,
                            CreatedById = 1,
                            CreatedDate = new DateTime(2020, 4, 16, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            LastModifiedById = 1,
                            LastModifiedDate = new DateTime(2020, 4, 16, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "5090EL"
                        },
                        new
                        {
                            Id = 13,
                            CreatedById = 1,
                            CreatedDate = new DateTime(2020, 4, 16, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            LastModifiedById = 1,
                            LastModifiedDate = new DateTime(2020, 4, 16, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "5100ML"
                        },
                        new
                        {
                            Id = 14,
                            CreatedById = 1,
                            CreatedDate = new DateTime(2020, 4, 16, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            LastModifiedById = 1,
                            LastModifiedDate = new DateTime(2020, 4, 16, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "5115ML"
                        },
                        new
                        {
                            Id = 15,
                            CreatedById = 1,
                            CreatedDate = new DateTime(2020, 4, 16, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            LastModifiedById = 1,
                            LastModifiedDate = new DateTime(2020, 4, 16, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "5125ML"
                        },
                        new
                        {
                            Id = 16,
                            CreatedById = 1,
                            CreatedDate = new DateTime(2020, 4, 16, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            LastModifiedById = 1,
                            LastModifiedDate = new DateTime(2020, 4, 16, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Row Crop 6 Series"
                        },
                        new
                        {
                            Id = 17,
                            CreatedById = 1,
                            CreatedDate = new DateTime(2020, 4, 16, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            LastModifiedById = 1,
                            LastModifiedDate = new DateTime(2020, 4, 16, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Row Crop 7 Series"
                        },
                        new
                        {
                            Id = 18,
                            CreatedById = 1,
                            CreatedDate = new DateTime(2020, 4, 16, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            LastModifiedById = 1,
                            LastModifiedDate = new DateTime(2020, 4, 16, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Row Crop 8 Series"
                        },
                        new
                        {
                            Id = 19,
                            CreatedById = 1,
                            CreatedDate = new DateTime(2020, 4, 16, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            LastModifiedById = 1,
                            LastModifiedDate = new DateTime(2020, 4, 16, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "4WD 80 Inch"
                        },
                        new
                        {
                            Id = 20,
                            CreatedById = 1,
                            CreatedDate = new DateTime(2020, 4, 16, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            LastModifiedById = 1,
                            LastModifiedDate = new DateTime(2020, 4, 16, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "4WD 88 Inch"
                        },
                        new
                        {
                            Id = 21,
                            CreatedById = 1,
                            CreatedDate = new DateTime(2020, 4, 16, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            LastModifiedById = 1,
                            LastModifiedDate = new DateTime(2020, 4, 16, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "4WD 120 Inch"
                        });
                });

            modelBuilder.Entity("psl.Entity.DataClasses.Routing", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("CarrierId")
                        .HasColumnType("int");

                    b.Property<int>("CreatedById")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("DestinationId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("EndTime")
                        .HasColumnType("datetime2");

                    b.Property<int>("LastModifiedById")
                        .HasColumnType("int");

                    b.Property<DateTime>("LastModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("OriginId")
                        .HasColumnType("int");

                    b.Property<DateTime>("StartTime")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("CarrierId");

                    b.HasIndex("CreatedById");

                    b.HasIndex("DestinationId");

                    b.HasIndex("LastModifiedById");

                    b.HasIndex("OriginId");

                    b.ToTable("Routing","Common");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CarrierId = 1,
                            CreatedById = 1,
                            CreatedDate = new DateTime(2020, 4, 16, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DestinationId = 2,
                            LastModifiedById = 1,
                            LastModifiedDate = new DateTime(2020, 4, 16, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            OriginId = 1,
                            StartTime = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        });
                });

            modelBuilder.Entity("psl.Entity.DataClasses.State", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<string>("Label")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(100)")
                        .HasMaxLength(100);

                    b.Property<int>("Sort")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("State","Lookup");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            IsActive = true,
                            Label = "Pennsylvania",
                            Name = "PA",
                            Sort = 1
                        },
                        new
                        {
                            Id = 2,
                            IsActive = true,
                            Label = "California",
                            Name = "CA",
                            Sort = 2
                        },
                        new
                        {
                            Id = 3,
                            IsActive = true,
                            Label = "Maryland",
                            Name = "MD",
                            Sort = 3
                        },
                        new
                        {
                            Id = 4,
                            IsActive = true,
                            Label = "North Carolina",
                            Name = "NC",
                            Sort = 4
                        },
                        new
                        {
                            Id = 5,
                            IsActive = true,
                            Label = "Illinois",
                            Name = "IL",
                            Sort = 5
                        },
                        new
                        {
                            Id = 6,
                            IsActive = true,
                            Label = "Iowa",
                            Name = "IA",
                            Sort = 6
                        });
                });

            modelBuilder.Entity("psl.Entity.DataClasses.Widget", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<double?>("Height")
                        .HasColumnType("float");

                    b.Property<string>("JustifyX")
                        .HasColumnType("nvarchar(20)")
                        .HasMaxLength(20);

                    b.Property<string>("JustifyY")
                        .HasColumnType("nvarchar(20)")
                        .HasMaxLength(20);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(100)")
                        .HasMaxLength(100);

                    b.Property<double?>("OffsetX")
                        .HasColumnType("float");

                    b.Property<double?>("OffsetY")
                        .HasColumnType("float");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.Property<double?>("Width")
                        .HasColumnType("float");

                    b.Property<double>("ZIndex")
                        .HasColumnType("float");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("Widget","Common");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<int>", b =>
                {
                    b.HasOne("psl.Entity.DataClasses.ApplicationRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<int>", b =>
                {
                    b.HasOne("psl.Entity.DataClasses.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<int>", b =>
                {
                    b.HasOne("psl.Entity.DataClasses.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<int>", b =>
                {
                    b.HasOne("psl.Entity.DataClasses.ApplicationRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("psl.Entity.DataClasses.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<int>", b =>
                {
                    b.HasOne("psl.Entity.DataClasses.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("psl.Entity.DataClasses.AccountUserXref", b =>
                {
                    b.HasOne("psl.Entity.DataClasses.Account", "Account")
                        .WithMany("Users")
                        .HasForeignKey("AccountId")
                        .HasConstraintName("FK_AccountUser_xref_Account")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("psl.Entity.DataClasses.AccountRole", null)
                        .WithMany("AccountUsers")
                        .HasForeignKey("AccountRoleId");

                    b.HasOne("psl.Entity.DataClasses.ApplicationUser", "User")
                        .WithMany("Accounts")
                        .HasForeignKey("UserId")
                        .HasConstraintName("FK_AccountUser_xref_User")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("psl.Entity.DataClasses.ApplicationUser", b =>
                {
                    b.HasOne("psl.Entity.DataClasses.Account", "PrimaryAccount")
                        .WithMany("PrimaryAccountUsers")
                        .HasForeignKey("PrimaryAccountId")
                        .HasConstraintName("FK_ApplicationUser_Account")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("psl.Entity.DataClasses.Carrier", b =>
                {
                    b.HasOne("psl.Entity.DataClasses.ApplicationUser", "CreatedBy")
                        .WithMany("CarrierCreatedBy")
                        .HasForeignKey("CreatedById")
                        .HasConstraintName("FK_Carrier_CreatedByUser")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("psl.Entity.DataClasses.ApplicationUser", "LastModifiedBy")
                        .WithMany("CarrierLastModifiedBy")
                        .HasForeignKey("LastModifiedById")
                        .HasConstraintName("FK_Carrier_LastModifiedByUser")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("psl.Entity.DataClasses.Dealer", b =>
                {
                    b.HasOne("psl.Entity.DataClasses.ApplicationUser", "CreatedBy")
                        .WithMany("DealerCreatedBy")
                        .HasForeignKey("CreatedById")
                        .HasConstraintName("FK_Dealer_CreatedByUser")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("psl.Entity.DataClasses.ApplicationUser", "LastModifiedBy")
                        .WithMany("DealerLastModifiedBy")
                        .HasForeignKey("LastModifiedById")
                        .HasConstraintName("FK_Dealer_LastModifiedByUser")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("psl.Entity.DataClasses.DealerLocationXref", b =>
                {
                    b.HasOne("psl.Entity.DataClasses.Dealer", "Dealer")
                        .WithMany("Locations")
                        .HasForeignKey("DealerId")
                        .HasConstraintName("FK_DealerLocation_xref_Dealer")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("psl.Entity.DataClasses.Location", "Location")
                        .WithMany("Dealers")
                        .HasForeignKey("LocationId")
                        .HasConstraintName("FK_DealerLocation_xref_Location")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("psl.Entity.DataClasses.Location", b =>
                {
                    b.HasOne("psl.Entity.DataClasses.ApplicationUser", "CreatedBy")
                        .WithMany("LocationCreatedBy")
                        .HasForeignKey("CreatedById")
                        .HasConstraintName("FK_Location_CreatedByUser")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("psl.Entity.DataClasses.ApplicationUser", "LastModifiedBy")
                        .WithMany("LocationLastModifiedBy")
                        .HasForeignKey("LastModifiedById")
                        .HasConstraintName("FK_Location_LastModifiedByUser")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("psl.Entity.DataClasses.State", "State")
                        .WithMany("Locations")
                        .HasForeignKey("StateId")
                        .HasConstraintName("FK_Location_State")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("psl.Entity.DataClasses.Order", b =>
                {
                    b.HasOne("psl.Entity.DataClasses.ApplicationUser", "CreatedBy")
                        .WithMany("OrderCreatedBy")
                        .HasForeignKey("CreatedById")
                        .HasConstraintName("FK_Order_CreatedByUser")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("psl.Entity.DataClasses.ApplicationUser", "LastModifiedBy")
                        .WithMany("OrderLastModifiedBy")
                        .HasForeignKey("LastModifiedById")
                        .HasConstraintName("FK_Order_LastModifiedByUser")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("psl.Entity.DataClasses.OrderProductXref", b =>
                {
                    b.HasOne("psl.Entity.DataClasses.Order", "Order")
                        .WithMany("Products")
                        .HasForeignKey("OrderId")
                        .HasConstraintName("FK_OrderProduct_xref_Order")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("psl.Entity.DataClasses.OrderProductXref", null)
                        .WithMany("Orders")
                        .HasForeignKey("OrderProductXrefId");

                    b.HasOne("psl.Entity.DataClasses.Product", "Product")
                        .WithMany("Orders")
                        .HasForeignKey("ProductId")
                        .HasConstraintName("FK_OrderProduct_xref_Product")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("psl.Entity.DataClasses.Product", b =>
                {
                    b.HasOne("psl.Entity.DataClasses.ApplicationUser", "CreatedBy")
                        .WithMany("ProductCreatedBy")
                        .HasForeignKey("CreatedById")
                        .HasConstraintName("FK_Product_CreatedByUser")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("psl.Entity.DataClasses.ApplicationUser", "LastModifiedBy")
                        .WithMany("ProductLastModifiedBy")
                        .HasForeignKey("LastModifiedById")
                        .HasConstraintName("FK_Product_LastModifiedByUser")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("psl.Entity.DataClasses.Routing", b =>
                {
                    b.HasOne("psl.Entity.DataClasses.Carrier", "Carrier")
                        .WithMany("Routings")
                        .HasForeignKey("CarrierId")
                        .HasConstraintName("FK_Routing_Carrier")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("psl.Entity.DataClasses.ApplicationUser", "CreatedBy")
                        .WithMany("RoutingCreatedBy")
                        .HasForeignKey("CreatedById")
                        .HasConstraintName("FK_Routing_CreatedByUser")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("psl.Entity.DataClasses.Location", "Destination")
                        .WithMany("DestinationRoutings")
                        .HasForeignKey("DestinationId")
                        .HasConstraintName("FK_Routing_DestinationLocation")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("psl.Entity.DataClasses.ApplicationUser", "LastModifiedBy")
                        .WithMany("RoutingLastModifiedBy")
                        .HasForeignKey("LastModifiedById")
                        .HasConstraintName("FK_Routing_LastModifiedByUser")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("psl.Entity.DataClasses.Location", "Origin")
                        .WithMany("OriginRoutings")
                        .HasForeignKey("OriginId")
                        .HasConstraintName("FK_Routing_OriginLocation")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("psl.Entity.DataClasses.Widget", b =>
                {
                    b.HasOne("psl.Entity.DataClasses.ApplicationUser", "User")
                        .WithMany("Widgets")
                        .HasForeignKey("UserId")
                        .HasConstraintName("FK_Widget_User")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
